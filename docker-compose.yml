version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: dental-clinic-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: dental_clinic
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5446:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - dental-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio
    container_name: dental-clinic-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_DEFAULT_BUCKETS: dental-clinic
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    volumes:
      - minio_data:/data
    networks:
      - dental-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO Client for bucket initialization
  minio-setup:
    image: minio/mc:latest
    container_name: dental-clinic-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      /usr/bin/mc mb myminio/dental-clinic --ignore-existing;
      /usr/bin/mc policy set public myminio/dental-clinic;
      exit 0;
      "
    networks:
      - dental-network

  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dental-clinic-app
    restart: unless-stopped
    env_file:
      - .env.production
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      minio-setup:
        condition: service_completed_successfully
    networks:
      - dental-network
    volumes:
      # Mount uploads directory for file persistence
      - app_uploads:/app/public/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/stats"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: dental-clinic-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # For SSL certificates
    depends_on:
      - app
    networks:
      - dental-network
    profiles:
      - production  # Only start with --profile production

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  app_uploads:
    driver: local

networks:
  dental-network:
    driver: bridge